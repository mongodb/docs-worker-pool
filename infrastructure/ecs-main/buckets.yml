Resources:
  DocsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: ${self:custom.bucketName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}
          RoutingRules:
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/master
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/upcoming
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.3.0
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.3
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.2.1
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.2
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.2.0
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.2
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.7
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.6
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.5
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.4
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.3
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.2
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1.0
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/atlas/cli/v1.1
            - RoutingRuleCondition:
                KeyPrefixEquals: ${self:custom.site.prefix.${self:provider.stage}}/php-library/master
              RedirectRule:
                Protocol: "https"
                HostName: ${self:custom.site.host.${self:provider.stage}}
                ReplaceKeyPrefixWith: ${self:custom.site.prefix.${self:provider.stage}}/php-library/upcoming
  DocAtlasBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.atlasBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}
  CloudManagerBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:  
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.cloudManagerBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  OpsManagerBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.opsManagerBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  JavaBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.javaBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  GoBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.goBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  NodeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.nodeBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  CSharpBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.cSharpBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  LanguagesBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: ${self:custom.languagesBucketName}
      WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: ${self:custom.site.errorDoc.${self:provider.stage}, null}

  DocsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DocsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocsBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocsBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocsBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocsBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocsBucket", "Arn" ] }, '/*']]

  DocAtlasBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DocAtlasBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["DocAtlasBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocAtlasBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocAtlasBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["DocAtlasBucket", "Arn" ] }, '/*']]

  CloudManagerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CloudManagerBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["CloudManagerBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CloudManagerBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CloudManagerBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CloudManagerBucket", "Arn" ] }, '/*']]

  OpsManagerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: OpsManagerBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["OpsManagerBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["OpsManagerBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["OpsManagerBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["OpsManagerBucket", "Arn" ] }, '/*']]

  JavaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: JavaBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["JavaBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["JavaBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["JavaBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["JavaBucket", "Arn" ] }, '/*']]

  GoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: GoBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["GoBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["GoBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["GoBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["GoBucket", "Arn" ] }, '/*']]

  NodeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: NodeBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["NodeBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["NodeBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["NodeBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["NodeBucket", "Arn" ] }, '/*']]

  CSharpBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CSharpBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["CSharpBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CSharpBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CSharpBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["CSharpBucket", "Arn" ] }, '/*']]

  LanguagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LanguagesBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
            - Fn::Join: ['', [{ "Fn::GetAtt": ["LanguagesBucket", "Arn" ] }, '/*']]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-archive-job-${self:provider.stage}-batch
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["LanguagesBucket", "Arn" ] }, '/*']]
              - Fn::Join: ['', [{ "Fn::GetAtt": ["LanguagesBucket", "Arn" ] }]]
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${aws:accountId}:role/docs-deploy-job-${self:provider.stage}-batch
            Action: 's3:PutObject'
            Resource:
              - Fn::Join: ['', [{ "Fn::GetAtt": ["LanguagesBucket", "Arn" ] }, '/*']]
