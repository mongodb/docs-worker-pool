GIT_BRANCH := $(shell git rev-parse --abbrev-ref HEAD)

DEDICATED_BUCKET=true

SNOOTY_ENV = $(shell printenv SNOOTY_ENV)

ifeq ($(STAGING_USERNAME),)
	USER=$(shell whoami)
else
	USER=$(STAGING_USERNAME)
endif

STAGING_URL_CLOUDMGR="https://docs-cloudmanager-staging.mongodb.com"
STAGING_BUCKET_CLOUDMGR=docs-cloudmanager-prd-staging
STAGING_URL_OPSMGR="https://docs-opsmanager-staging.mongodb.com"
STAGING_BUCKET_OPSMGR=docs-opsmanager-prd-staging

ifeq ($(REGRESSION), true)
	PRODUCTION_URL_CLOUDMGR="https://docs-cloudmanager-integration.mongodb.com"
	PRODUCTION_BUCKET_CLOUDMGR=docs-cloudmanager-intgr
	PRODUCTION_URL_OPSMGR="https://docs-opsmanager-integration.mongodb.com"
	PRODUCTION_BUCKET_OPSMGR=docs-opsmanager-intgr	
else ifeq ($(SNOOTY_ENV), production) 
	PRODUCTION_URL_OPSMGR="https://docs.opsmanager.mongodb.com"
	PRODUCTION_BUCKET_OPSMGR=docs-opsmanager-prd
	PRODUCTION_URL_CLOUDMGR="https://docs.cloudmanager.mongodb.com"
	PRODUCTION_BUCKET_CLOUDMGR=docs-cloudmanager-prd
else ifeq ($(SNOOTY_ENV), staging)
	PRODUCTION_URL_CLOUDMGR="https://docs-cloudmanager-staging.mongodb.com"
	PRODUCTION_BUCKET_CLOUDMGR=docs-cloudmanager-stg
	PRODUCTION_URL_OPSMGR="https://docs-opsmanager-staging.mongodb.com"
	PRODUCTION_BUCKET_OPSMGR=docs-opsmanager-stg		
else ifeq ($(SNOOTY_ENV), integration)
	PRODUCTION_URL_CLOUDMGR="https://docs-cloudmanager-integration.mongodb.com"
	PRODUCTION_BUCKET_CLOUDMGR=docs-cloudmanager-intgr
	PRODUCTION_URL_OPSMGR="https://docs-opsmanager-integration.mongodb.com"
	PRODUCTION_BUCKET_OPSMGR=docs-opsmanager-intgr		
endif


PREFIX=

PROJECT=mms
REPO_DIR=$(shell pwd)


SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)

include ~/shared.mk

# Parse our published-branches configuration file to get the name of
# the current "stable" branch. This is weird and dumb, yes.
STABLE_BRANCH=`grep 'manual' build/docs-tools/data/mms-published-branches.yaml | cut -d ':' -f 2 | grep -Eo '[0-9a-z.]+'`

## I doubt that we'll ever have files named stage-cloud,
## fake-deploy-cloud, ... but eh
.PHONY: help html publish publish-cloud publish-onprem stage-cloud stage-onprem 



stage: stage-cloud stage-opsmgr ## Stage both Cloud and On-Prem

##########################################################
####                                                  ####
####          BUILD DOCUMENTATION ARTIFACTS           ####
####                                                  ####
##########################################################


##########################################################
####              BUILD STAGING ARTIFACTS             ####
##########################################################

## Build both Cloud/Ops Manager HTML files
html:
	giza make html

## Build Ops Manager HTML files
html-opsmgr:
	giza make html-onprem

## Build Cloud Manager HTML files
html-cloud:
	giza make html-cloud

##########################################################
####       BUILD, STAGE AND DEPLOY NEXT-GEN SITE      ####
##########################################################

get-build-dependencies: 
	curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/publishedbranches/mms-docs.yaml > ${REPO_DIR}/published-branches.yaml

##########################################################
####   BUILD STAGING ARTIFACTS TO CLEAN DIRECTORY     ####
##########################################################

## Build both Cloud/Ops Manager HTML files to a fresh build directory
clean-html:
	rm -rf build/${GIT_BRANCH}
	giza make html

## Build Ops Manager HTML files to a fresh build directory
clean-html-opsmgr:
	rm -rf build/${GIT_BRANCH}
	giza make html-onprem

## Build Cloud Manager HTML files to a fresh build directory
clean-html-cloud:
	rm -rf build/${GIT_BRANCH}
	giza make html-cloud


##########################################################
####             BUILD PRODUCTION ARTIFACTS           ####
##########################################################

## Build both Cloud/Ops Manager publishable production artifacts
publish: publish-cloud publish-onprem

## Build Cloud Manager publishable production artifacts
publish-cloud:
	if [ ${GIT_BRANCH} = master ]; then rm -rf build/master build/public/cloud; fi
	giza make publish-cloud
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects-cloud -o build/public/cloud/.htaccess; fi

## Build Ops Manager publishable production artifacts
publish-onprem:
	if [ ${GIT_BRANCH} = master ]; then rm -rf build/master build/public/onprem; fi
	giza make publish-onprem
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects-onprem -o build/public/onprem/.htaccess; fi


##########################################################
####                                                  ####
####        DEPLOY CLOUD MANAGER DOCUMENTATION        ####
####                                                  ####
##########################################################


##########################################################
####  DEPLOY CLOUD MANAGER DOCUMENTATION TO STAGING   ####
##########################################################

## Deploy artifacts from the working branch of Cloud Manager
## to the staging S3 bucket / EC2 for review
stage-cloud:
	mut-publish build/${GIT_BRANCH}/html-cloud ${STAGING_BUCKET_CLOUDMGR} --prefix=${PREFIX} --stage ${ARGS}
	@echo "\n\nHosted at ${STAGING_URL_CLOUDMGR}/${USER}/${GIT_BRANCH}/index.html"

## Create a fake deployment in the staging bucket
fake-deploy-cloud: build/public/cloud
	@echo "Copying over landing page"
	cp -p build/landing/landing.html build/public/cloud/
	cp -p build/landing/style.min.css build/public/cloud/_static/
	cp -p build/landing/*webfont* build/public/cloud/_static/fonts

	mut-publish build/public/cloud ${STAGING_BUCKET_CLOUDMGR} --prefix=${PREFIX}  --all-subdirectories --deploy ${ARGS}
	@echo "\n\nHosted at ${STAGING_URL_CLOUDMGR}/index.html"


##########################################################
####                                                  ####
####         DEPLOY OPS MANAGER DOCUMENTATION         ####
####                                                  ####
##########################################################


##########################################################
####   DEPLOY OPS MANAGER DOCUMENTATION TO STAGING    ####
##########################################################

## Deploy artifacts from the working branch of Ops Manager
## to the staging S3 bucket / EC2 for review
stage-opsmgr:
	mut-publish build/${GIT_BRANCH}/html-onprem ${STAGING_BUCKET_OPSMGR} --prefix=${PREFIX} --stage --all-subdirectories ${ARGS}
	@echo "\n\nHosted at ${STAGING_URL_OPSMGR}/${USER}/${GIT_BRANCH}/index.html"

## Create a fake deployment in the staging bucket
fake-deploy-opsmgr: build/public/onprem
	@echo "Copying over fullsize images "
	cp source/figures/*fullsize.png build/public/onprem/${GIT_BRANCH}/_images/

	mut-publish build/public/onprem/${GIT_BRANCH} ${STAGING_BUCKET_OPSMGR} --prefix=${GIT_BRANCH} --deploy --all-subdirectories ${ARGS}
	@echo "\n\nHosted at ${STAGING_URL_OPSMGR}/${GIT_BRANCH}/index.html"


