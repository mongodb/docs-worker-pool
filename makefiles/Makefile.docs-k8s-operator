GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
ifeq ($(STAGING_USERNAME),)
	USER=$(shell whoami)
else
	USER=$(STAGING_USERNAME)
endif
STAGING_URL="https://docs-mongodborg-staging.corp.mongodb.com"
PRODUCTION_URL="https://docs.mongodb.com"
STAGING_BUCKET=docs-mongodb-org-staging
PRODUCTION_BUCKET=docs-k8s-operator-prod
PROJECT=docs-k8s-operator
PREFIX=docs-k8s-operator
MUT_PREFIX ?= $(PROJECT)
REPO_DIR=$(shell pwd)


SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)

# Parse our published-branches configuration file to get the name of
# the current "stable" branch. This is weird and dumb, yes.
STABLE_BRANCH=`grep 'manual' build/docs-tools/data/${PROJECT}-published-branches.yaml | cut -d ':' -f 2 | grep -Eo '[0-9a-z.]+'`

.PHONY: help html publish stage deploy deploy-search-index



#################################################################
####                                                         ####
####             BUILD DOCUMENTATION ARTIFACTS               ####
####                                                         ####
#################################################################


#################################################################
####                  BUILD STAGING ARTIFACTS                ####
#################################################################

## Builds this branch's HTML under build/<branch>/html
html:
	giza make html


#################################################################
####       BUILD STAGING ARTIFACTS TO CLEAN DIRECTORY        ####
#################################################################

## Build this branch's HTML files to a fresh build directory
clean-html:
	rm -rf build/${GIT_BRANCH}
	giza make html


#################################################################
####                 BUILD PRODUCTION ARTIFACTS              ####
#################################################################

## Builds this branch's publishable HTML and other artifacts under
## build/public
publish:
	giza make publish
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects -o build/public/.htaccess; fi


#################################################################
####                                                         ####
####        DEPLOY KUBERNETES OPERATOR DOCUMENTATION         ####
####                                                         ####
#################################################################


#################################################################
####   DEPLOY KUBERNETES OPERATOR DOCUMENTATION TO STAGING   ####
#################################################################

next-gen-html:
	# snooty parse and then build-front-end
	@echo ${SNOOTY_DB_PWD} | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true"; \
	if [ $$? -eq 1 ]; then \
		exit 1; \
	else \
		exit 0; \
	fi
	rsync -az --exclude '.git' ${REPO_DIR}/../../snooty ${REPO_DIR}; \
	cp ${REPO_DIR}/.env.production ${REPO_DIR}/snooty; \
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" >> .env.production; \
	npm run build; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};
  
next-gen-stage: ## Host online for review
	mut-publish public ${STAGING_BUCKET} --prefix="${MUT_PREFIX}" --stage ${ARGS}; 
	echo "Hosted at ${STAGING_URL}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/";



get-build-dependencies: 
	curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/publishedbranches/docs-k8s-operator.yaml > ${REPO_DIR}/published-branches.yaml

next-gen-deploy:
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects -o public/.htaccess; fi
	yes | mut-publish public ${PRODUCTION_BUCKET} --prefix="${MUT_PREFIX}" --deploy --deployed-url-prefix=https://docs.mongodb.com --json --all-subdirectories ${ARGS};
	@echo "Hosted at ${PRODUCTION_URL}/${MUT_PREFIX}/index.html";
	$(MAKE) next-gen-deploy-search-index


#################################################################
####  DEPLOY KUBERNETES OPERATOR DOCUMENTATION TO PRODUCTION ####
#################################################################

stage: ## Host online for review
	mut-publish build/${GIT_BRANCH}/html ${STAGING_BUCKET} --prefix=${PROJECT} --stage ${ARGS}
	@echo "Hosted at ${STAGING_URL}/${PROJECT}/${USER}/${GIT_BRANCH}/index.html"

## Deploy to the production bucket
deploy: build/public
	mut-publish build/public ${PRODUCTION_BUCKET} --prefix=${PROJECT} --deploy --redirect-prefix='${PROJECT}' ${ARGS}

	@echo "\n\nHosted at ${PRODUCTION_URL}/${PROJECT}/index.html"

	$(MAKE) next-gen-deploy-search-index

## Update the search index for this branch
## Update the search index for this branch
next-gen-deploy-search-index:
	@echo "Building search index"
	mut-index upload public -o ${MANIFEST_PREFIX}.json -u ${PRODUCTION_URL}/${MUT_PREFIX} -s ${GLOBAL_SEARCH_FLAG}
