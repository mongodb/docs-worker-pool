GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)
USER=$(shell whoami)
STAGING_URL="https://docs-mongodborg-staging.corp.mongodb.com"
PRODUCTION_URL="https://docs.mongodb.com/landing"
STAGING_BUCKET=docs-mongodb-org-staging
PRODUCTION_BUCKET=docs-mongodb-org-prod
PROJECT=landing
REPO_DIR=$(shell pwd)
COMMIT_HASH=$(shell git rev-parse --short HEAD)

SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)

.PHONY: help lint html stage deploy deploy-search-index

help:
	@echo 'Targets'
	@echo '  help         - Show this help message'
	@echo '  build        - Build HTML artifacts for upload'
	@echo '  stage        - Host online for review'
	@echo '  deploy       - Deploy into production'
	@echo ''
	@echo 'Variables'
	@echo '  ARGS         - Arguments to pass to mut-publish'

next-gen-html:
	# snooty parse and then build-front-end
	@echo ${SNOOTY_DB_PWD} | snooty build ${REPO_DIR} "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true"; \
	if [ $$? -eq 1 ]; then \
		exit 1; \
	else \
		exit 0; \
	fi
	cp -r ${REPO_DIR}/../../snooty ${REPO_DIR};
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" > .env.production; \
	echo "GATSBY_PARSER_USER=${USER}" >> .env.production; \
	echo "GATSBY_PARSER_BRANCH=${GIT_BRANCH}" >> .env.production; \
	npm run build; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};

next-gen-stage: ## Host online for review
	mut-publish public ${STAGING_BUCKET} --prefix=${PROJECT} --stage ${ARGS}
	@echo "Hosted at ${STAGING_URL}/${PROJECT}/${USER}/${GIT_BRANCH}/"
	
next-gen-publish: build
	# snooty parse and then build-front-end
	@-echo ${SNOOTY_DB_PWD} | snooty build "${REPO_DIR}" "mongodb+srv://${SNOOTY_DB_USR}:@cluster0-ylwlz.mongodb.net/snooty?retryWrites=true" --commit "${COMMIT_HASH}" || exit 0;
	rsync -az --exclude '.git' ${REPO_DIR}/../../snooty ${REPO_DIR};
	curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/configfiles/docs-landing/gatsby-config.js > ${REPO_DIR}/snooty/gatsby-config.js
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" > .env.production; \
	echo "GATSBY_PARSER_USER=${USER}" >> .env.production; \
	echo "GATSBY_PARSER_BRANCH=${GIT_BRANCH}" >> .env.production; \
	echo "COMMIT_HASH=${COMMIT_HASH}" >> .env.production; \
	npm run build; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};

next-gen-deploy:
	yes | mut-publish public ${PRODUCTION_BUCKET} --prefix=/ --deploy --all-subdirectories ${ARGS}
	@echo "Hosted at ${PRODUCTION_URL}/${PROJECT}/index.html"
	$(MAKE) deploy-search-index

html: ## Builds this branch's HTML under build/<branch>/html
	giza make html

publish: ## Builds this branch's publishable HTML and other artifacts under build/public
	if [ ${GIT_BRANCH} = master ]; then rm -rf build/master build/public; fi
	giza make publish
	if [ ${GIT_BRANCH} = master ]; then mut-redirects config/redirects -o build/public/.htaccess; fi

lint: ## Checks URLs in the built corpus underneath build/<branch>/html
	mut-lint --linters=links ./build/master/source/ ${ARGS}

stage: build
	mut-publish build/ docs-mongodb-org-staging --prefix=${PREFIX} --stage --verbose ${ARGS}
	@echo "Hosted at ${URL}/${PREFIX}/${USER}/${GIT_BRANCH}/index.html"
	@echo "Hosted at ${URL}/${PREFIX}/${USER}/${GIT_BRANCH}/cloud/index.html"
	@echo "Hosted at ${URL}/${PREFIX}/${USER}/${GIT_BRANCH}/tools/index.html"

deploy: build
	mut-publish build ${PRODUCTION_BUCKET} --prefix='/' --deploy --json --all-subdirectories ${ARGS}

	@echo "Deployed"

deploy-search-index: ## Update the search index for this branch
	@echo "Building search index"
	mut-index upload build/public -o ${PROJECT}-${GIT_BRANCH}.json -u ${PRODUCTION_URL} -s
	
build:
	# Clean build directory
	rm -rf $@
	# Create output directories
	mkdir -p $@
	mkdir -p $@/cloud
	mkdir -p $@/tools
	mkdir -p $@/images
	mkdir -p $@/announcements/login-and-access-changes
	@# Copy CSS and JS files to output directories
	cp static/favicon.png $@/favicon.ico
	cp -r static/images static/css static/js $@/
	cp -r static/images static/css static/js $@/tools
	cp -r static/images static/css static/js $@/cloud
	cp -r static/images static/css static/js $@/announcements/login-and-access-changes
	cp -r src/images/announcements/* $@/announcements/login-and-access-changes/images
	@# Run the script to generate each landing page
	python3 ./gen_landings.py $@
