GIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)

USER=$(shell whoami)


PROJECT=landing
MUT_PREFIX ?= $(PROJECT)
REPO_DIR=$(shell pwd)

SNOOTY_DB_USR = $(shell printenv MONGO_ATLAS_USERNAME)
SNOOTY_DB_PWD = $(shell printenv MONGO_ATLAS_PASSWORD)
PUSHLESS_DEPLOY_SHARED_DISABLED=true

include ~/shared.mk

DOCS_TOOLS_THEME=docs-tools/themes/mongodb/static



get-build-dependencies:
	@curl https://raw.githubusercontent.com/mongodb/docs-worker-pool/meta/publishedbranches/docs-landing.yaml > ${REPO_DIR}/published-branches.yaml

next-gen-html: build-legacy-pages
	# snooty parse and then build-front-end
	snooty build "${REPO_DIR}" --output "${BUNDLE_PATH}" ${RSTSPEC_FLAG}; \
	if [ $$? -eq 1 ]; then \
		exit 1; \
	else \
		exit 0; \
	fi
	# persistence module - add bundle zip to Atlas documents
	# ignore errors "-" flag
	-node --unhandled-rejections=strict ${PERSISTENCE_MODULE_PATH} --path ${BUNDLE_PATH}
	rsync -az --exclude '.git' "${REPO_DIR}/../../snooty" "${REPO_DIR}"
	cp ${REPO_DIR}/.env.production ${REPO_DIR}/snooty;
	cd snooty; \
	echo "GATSBY_SITE=${PROJECT}" >> .env.production; \
	GATSBY_MANIFEST_PATH="${BUNDLE_PATH}" npm run build; \
	cp -r "${REPO_DIR}/snooty/public" ${REPO_DIR};
	mv build-legacy-pages/sitemap-index.xml public/
	mv build-legacy-pages/tools public/
	mv build-legacy-pages/cloud public/

next-gen-stage:
	mut-publish public ${BUCKET} --prefix="${MUT_PREFIX}" --stage ${ARGS};
	echo "Hosted at ${URL}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/";
	echo "Hosted at ${URL}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/cloud";
	echo "Hosted at ${URL}/${MUT_PREFIX}/${USER}/${GIT_BRANCH}/tools";

build-legacy-pages:
	@# Pull docs-tools updates
	git submodule init
	git submodule update --remote

	@# Clean build directory
	rm -rf $@

	@# Create output directories
	mkdir -p $@
	mkdir -p $@/cloud
	mkdir -p $@/tools

	@# Copy CSS and JS files to output directories
	cp static/sitemap-index.xml $@/sitemap-index.xml
	cp static/favicon.png $@/favicon.ico
	for prefix in $@/ $@/tools $@/cloud; do \
		mkdir -p $$prefix/js || exit 1; \
		cp -r static/images $$prefix || exit 1; \
		cp -r static/css $$prefix || exit 1; \
		cp ${DOCS_TOOLS_THEME}/landing.min.js* $$prefix/js || exit 1; \
		cp ${DOCS_TOOLS_THEME}/navbar.min.js* $$prefix/js || exit 1; \
		cp ${DOCS_TOOLS_THEME}/landing.css $$prefix/css || exit 1; \
		cp ${DOCS_TOOLS_THEME}/navbar.min.css $$prefix/css || exit 1; \
	done

	@# Run the script to generate each landing page
	python3 ./gen_landings.py $@
